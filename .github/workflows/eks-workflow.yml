name: Build and Push to ECR
on:
  workflow_dispatch:
  push:
    branches: [ eks, master ]
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    
    - name: Get the version
      id: get_version
      run: echo "VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed 's/master/latest/' | sed 's/[^a-zA-Z0-9]/-/g')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
    
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESSE_TOKEN }}
      run: ls
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build with Maven
      run: mvn clean install
      
    - name: Build and push Docker image
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.APP_NAME }}:${{ steps.get_version.outputs.VERSION }}
          ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.APP_NAME }}:latest
    
    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_INSTANCE_PUBLIC_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_KEY }}
        script: |
          container_id=$(sudo docker ps | grep "${{ secrets.APP_NAME }}" | awk '{print $1}')
          if [ ! -z "$container_id" ]; then
              sudo docker-compose down
          fi
          sudo docker system prune -f -a
          
          # Log in to ECR from EC2
          aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.DOCKER_REGISTRY }}
          
          # Pull the latest image
          sudo docker pull ${{ secrets.DOCKER_REGISTRY }}/${{ secrets.APP_NAME }}:${{ steps.get_version.outputs.VERSION }}
          
          # Start the containers
          sudo docker-compose up -d
